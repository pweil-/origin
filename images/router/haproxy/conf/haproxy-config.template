{{/*
    haproxy-config.cfg: contains the main config with helper backends that are used to terminate
    					encryption before finally sending to a host_be which is the backend that is the final
    					backend for a route and contains all the endpoints for the service
*/}}
{{ define "/var/lib/haproxy/conf/haproxy.config" }}
global
  # maxconn 4096
  user haproxy
  group haproxy
  daemon
  ca-base /etc/ssl
  crt-base /etc/ssl
  stats socket /var/lib/haproxy/run/haproxy.sock mode 600 level admin
  stats timeout 2m

defaults
  # maxconn 4096
  mode http
  # Add x-forwarded-for header.
  timeout connect 5s
  timeout client 30s
  timeout server 30s
  # Long timeout for WebSocket connections.
  timeout tunnel 1h

frontend public
  bind :80
  mode http
  tcp-request inspect-delay 5s
  tcp-request content accept if HTTP

  acl is_ws hdr(Upgrade) -i WebSocket
  # websocket traffic, no ssl
  use_backend be_ws_%[hdr(host),map(/var/lib/haproxy/conf/host_be_ws.map)] if is_ws

  # http traffic
  use_backend be_%[hdr(host),map(/var/lib/haproxy/conf/host_be.map)] if TRUE
  default_backend openshift_default

# public ssl accepts all connections and isn't checking certificates yet
# certificates to use will be determined by the backend
frontend public_ssl
  bind :443
  mode tcp
  tcp-request  inspect-delay 5s
  tcp-request content accept if { req_ssl_hello_type 1 }
  use_backend be_sni if { req.ssl_sni -m found }
  default_backend be_no_sni

##########################################################################
# TLS SNI
#
# First check to see if this SNI route is configured as a passthrough, if so then
# simply pass it along.
#
# If not a passthrough, when using SNI we can terminate encryption with custom certificates.
# Certs will be stored in a directory and will be matched with the SNI host header
# which must exist in the CN of the certificate.  Certificates must be concatenated
# as a single file (handled by the plugin writer) per the haproxy documentation.
#
# Finally, check re-encryption settings and re-encrypt or just pass along the unencrypted
# traffic
##########################################################################
backend be_sni
  mode tcp
  server fe_sni 127.0.0.1:10444 weight 1 send-proxy

frontend fe_sni
  # for sni passthrough go straight to the backend
  acl sni_passthrough req.ssl_sni,map(/var/lib/haproxy/conf/host_sni_passthrough.map) eq 1
  use_backend be_%[hdr(host),map(/var/lib/haproxy/conf/host_be.map)] if sni_passthrough

  # terminate ssl on edge
  bind 127.0.0.1:10444 ssl crt /var/lib/containers/router/certs accept-proxy

  # re-ssl?
  # use_backend be_ressl_%[hdr(host),map(/var/lib/haproxy/conf/host_be_ressl.map)] if TRUE

  # regular http
  use_backend be_%[hdr(host),map(/var/lib/haproxy/conf/host_be.map)] if TRUE

  default_backend openshift_default

##########################################################################
# END TLS SNI
##########################################################################

##########################################################################
# TLS NO SNI
#
# When we don't have sni the only thing we can try to do is terminate the encryption
# using our wild card certificate.  Once that is complete we can either re-encrypt
# the traffic or pass it on to the backends
##########################################################################
frontend fe_no_sni
  # terminate ssl on edge
  bind 127.0.0.1:10443 ssl crt /var/lib/haproxy/conf/default_pub_keys.pem accept-proxy

  # re-ssl?
  use_backend be_ressl_%[hdr(host),map(/var/lib/haproxy/conf/host_be_ressl.map)] if TRUE

  # regular http
  use_backend be_%[hdr(host),map(/var/lib/haproxy/conf/host_be.map)] if TRUE

  default_backend openshift_default

# backend for when sni does not exist, or ssl term needs to happen on the edge
backend be_no_sni
  mode tcp
  server fe_no_sni 127.0.0.1:10443 weight 1 send-proxy

##########################################################################
# END TLS NO SNI
##########################################################################

backend openshift_default
  mode http
  option forwardfor
  #option http-keep-alive
  option http-pretend-keepalive
  server openshift_backend 127.0.0.1:8080

##-------------- app level backends ----------------

{{   range $id, $serviceUnit := . }}
backend be_{{$id}} mode http
  balance leastconn
  timeout check 5000ms
{{     range $endpointID, $endpoint := $serviceUnit.EndpointTable }}
  server {{$id}} {{$endpoint.IP}}:{{$endpoint.Port}} check inter 5000ms
{{     end }}
{{   end }}
{{ end }}{{/* end haproxy config template */}}

{{/*
    host_be.map: contains a mapping of backend.ID -> host_be. See above for the definition of a host_be.
*/}}
{{ define "/var/lib/haproxy/conf/host_be.map" }}
{{   range $id, $serviceUnit := . }}
{{     range $idx, $cfg := $serviceUnit.ServiceAliasConfigs }}
{{       if ne $cfg.Host "" }}
{{$cfg.Host}} {{$id}}
{{       end }}
{{     end }}
{{   end }}
{{ end }}{{/* end host map template */}}

{{/*
    host_sni_passthrough.map: contains a mapping of routes that expect to have an sni header and should be passed
    					through to the host_be.  Driven by the termination type of the ServiceAliasConfigs
*/}}
{{ define "/var/lib/haproxy/conf/host_sni_passthrough.map" }}
{{   range $id, $serviceUnit := . }}
{{     range $idx, $cfg := $serviceUnit.ServiceAliasConfigs }}
{{       if eq $cfg.TLSTermination "pod" }}
{{$cfg.Host}} 1
{{       end }}
{{     end }}
{{   end }}
{{ end }}{{/* end sni passthrough map template */}}

